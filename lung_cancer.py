# -*- coding: utf-8 -*-
"""Lung_cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/kevinsunil/classwork/blob/main/Lung_cancer.ipynb

# **Dependencies**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
import seaborn as sn

"""# Data Processing"""

lung_cancer_data = pd.read_csv('/content/survey lung cancer.csv')

lung_cancer_data.head()

lung_cancer_data.tail()

lung_cancer_data.shape

lung_cancer_data.info()

lung_cancer_data.isnull().sum()

lung_cancer_data.describe(include = 'object')

lung_cancer_data.describe()

#check for duplicates
lung_cancer_data[lung_cancer_data.duplicated()]

#removing duplicated values
lung_cancer_data.drop_duplicates()

lung_cancer_data.info()

#Label Encoding
lung_cancer_data['GENDER'] =  lung_cancer_data['GENDER'].map({'M':1,'F':0})

print(lung_cancer_data['GENDER'])

lung_cancer_data['LUNG_CANCER'] = lung_cancer_data['LUNG_CANCER'].map({'YES':1,'NO':0})

print(lung_cancer_data['LUNG_CANCER'])

lung_cancer_data.plot()

corr = lung_cancer_data.corr()
features = corr.index
plt.figure(figsize=(10,10))
ax = sn.heatmap(lung_cancer_data[features].corr(), annot=True)

"""# Splitting Dataset"""

x = lung_cancer_data.drop(columns = 'LUNG_CANCER',axis=1)
y = lung_cancer_data['LUNG_CANCER']

print(x)

X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.2,stratify=y, random_state=2)

print(x.shape, X_train.shape)

"""Logistic Regression"""

model = LogisticRegression()

model.fit(X_train,Y_train)

"""Accuracy check"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuracy on training data: ",training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Accuracy on testing data: ",test_data_accuracy)

"""Custom input"""

input=(1,21,2,2,2,2,1,2,1,1,2,1,2,1,1)
input_asnparray = np.asarray(input)

input_reshaped = input_asnparray.reshape(1,-1)
prediction = model.predict(input_reshaped)
print(prediction)

